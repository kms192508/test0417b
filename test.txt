깃.깃허브123

커밋(commit) : 파일을 추가







Git
버전관리 시스템의 종류
버전관리: 여러 파일을 하나의 전으로 묶어 관리하는 것

버전 관리 시스템의 종류

1. 클라이언트 - 서버 모델
- 하나의 중앙 서버 여러 클라이언트들이 각자 필요한 데이터만 가져와서 작업을 하고, 다시 중앙 서버로 보내서 통합하는 방식
- CVS, SVN

2. 분사 ㄴ모델
하나의 중앙 서버가 존재하지만 여러 클라이언트들은 각자의 컴퓨터 저장소에 전체 사본을 가지고 작업하는 방식
- Git

Git의 장점
- 동시에 작업하는 사람들과 소스코드를 주고 받을 필요가 없음
- 같은 파일을 여러명이 동시에 병렬 개발이 가능
- 변동 과정에 체계적으로 관리할 수 있고, 언제든지 지나 시점의 버전으로 되돌릴 수 있음
- 인터넷이 연결되지 않은 곳에서도 개발을 진행할 수 있으며, 중앙 서버의 데이터가 유실되어도 다시 복구할 수 있음

1. 구글에서 'git설치' 검색
2. 좌측 메뉴 'download'클릭
3. 자신의 운영체제에 맞는 프로그램을 다운로드
4. git이 설치되어 있는지 확인
 - cmder에서 git명령어로 확인

5. 기본설정으로 설치
 터미널 기본 명령어
 컨트롤 + L : 화면 클리어
 pwd: 현재 디렉토리 경로를 표시
 ls: 현재 디렉토리에 존재하는 디렉토리와 파일을 표시
 cd: 다른 디렉토리로 이동
 cd.. : 상위 디렉토리로 이동
 cd 디렉토리명 : 해당 디렉토리로 이동

6. git로컬 저장소 생성
  git init
  ls -al
  숨긴 디렉토리까지 확인

7. git에 버전 관리 파일들을 생성
  test.txt, index.html

8. 버전관리 파일 선택 gitg
  파일을 하나만 선택
   - git add 파일명.확장자
   - git add text.txt
  파일을 여러개를 선택
   - git add .

9. 버전관리 파일 커밋
   git commit -m "index.html 버전관리"

   [오류발생시 해결방법]

10. 로그 확인
   git log

11. 브런치명 설정
   git pull origin 브랜치명(main)

13. 로컬 저장소에 github 저장소 주소 설정
  git remote add origin git#github.com:kms192508/test01.git
  -> 연결 상태
  git remot -v
  -> 연결 해제
  git remote remove origin

  *****웹 자격증명 관리 => window 자격증명에서 깃허브 계정 편집및 삭제

14. 만든 커밋 github 푸시
   git push -u origin master
   git 


kms767125@gmail.com
git config --global user.email "kms767125@gmail.com"


   echo "# test0417b" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/kms192508/test0417b.git
git push -u origin main

[이전에 연결된 깃허브를 사용]
15. 다시 재선택 
   git add . 

16. 커밋 대기 
    git commit -m "메시지입력"
17. 브런치명 설정
    git pull origin main
18. 푸시
    git push -u origin main 또는
    git push origin main